MerkleTreeBuilder.java
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class MerkleTreeBuilder {

    private static final String OBJECTS_DIR = ".vcs/objects/";

    public static String buildMerkle(Tree.Node node) {
        // Ensure .vcs/objects exists
        File objDir = new File(OBJECTS_DIR);
        if (!objDir.exists()) {
            objDir.mkdirs();
        }

        if (node.getChildren().isEmpty()) {
            // --- Blob (file) ---
            String cwd = System.getProperty("user.dir");
            String content = BlobGen.readFile(cwd + "/" + node.getFullPath()); 
            String hash = HashBuilder.blobHash(content);

            node.setHash(hash);

            // Blob object contains filename + content
            String blobContent =  node.getName() + "\n" + content;

            writeObject("ob" + hash, blobContent);

            return hash;
        } else {
            // --- Tree (directory) ---
            StringBuilder combined = new StringBuilder();
            StringBuilder treeContent = new StringBuilder();

            for (Tree.Node child : node.getChildren()) {
                String childHash = buildMerkle(child);

                // Add to combined hash input
                combined.append(child.toString())
                        .append(":")
                        .append(childHash);

                // Add to tree object content
                String type = child.getChildren().isEmpty() ? "blob" : "tree";
                treeContent.append(type)
                           .append(" ")
                           .append(child.getName())
                           .append(" ")
                           .append(childHash)
                           .append("\n");
            }

            String dirHash = HashBuilder.treeHash(combined.toString());
            node.setHash(dirHash);

            // Tree object contains children listing
            writeObject("tr" + dirHash, treeContent.toString());

            return dirHash;
        }
        
    }

    private static void writeObject(String fileName, String content) {
        try {
            File objFile = new File(OBJECTS_DIR + fileName);
            if (!objFile.exists()) { // avoid duplicates
                try (FileWriter writer = new FileWriter(objFile)) {
                    writer.write(content);
                }
            }
        } catch (IOException e) {
            throw new RuntimeException("Error writing object: " + fileName, e);
        }
    }

    public static void stageFiles(String content){
        writeObject("stage.txt", content);
    }
}
