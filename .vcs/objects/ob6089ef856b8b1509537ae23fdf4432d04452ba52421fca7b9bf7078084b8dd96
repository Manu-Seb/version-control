MainFunc.java
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Blob;
import java.util.ArrayList;

public class MainFunc {

    private String lastTreeHash;
    public  void addFiles(String dirPath){
        String homeDir = System.getProperty("user.home");
        String cwd = System.getProperty("user.dir");
        ArrayList paths = Helper.getFiles(dirPath);
        Tree rep = new Tree(paths, cwd);
        Tree.Node root = rep.getRoot();
        MerkleTreeBuilder m = new MerkleTreeBuilder();

        lastTreeHash = m.buildMerkle(root);

        Helper.stageFiles( lastTreeHash);
        // System.out.println(merkle);
        // rep.printTree(root, lastTreeHash);
        System.out.println(lastTreeHash);
        
            
    }   

    public void commit(String message, String author) {
        if (lastTreeHash == null) {
            System.out.println("No changes staged. Run addFiles() first.");
            return;
        }

        String commitHash = Helper.createCommit(lastTreeHash, message, author);
        System.out.println("Committed: " + commitHash);

        // Clear staged state (optional, like Git index)
        lastTreeHash = null;
    }

    public void status(){
        String cwd = System.getProperty("user.dir");
        ArrayList<String> files = Helper.getFiles(cwd);

        ArrayList<String> filesNotAdded = new ArrayList<>();
        ArrayList<String> filesAdded = new ArrayList<>();
        
        String stage= Helper.readFile(cwd + "/.vcs/objects/stage.txt");

        if (stage == null) {
            System.out.println("No changes staged. Run addFiles() first.");
            return;
        }

        String[] hashes = stage.split("\n");
        
        System.out.println("Current Head " + hashes[0]);
        
        for( String file : files){
            String hash = Helper.createHash(file);
            File fileObj = new File(cwd +".vcs/objects/"+"ob"+hash);
            if(fileObj.exists()) filesAdded.add(file);
            else filesNotAdded.add(file);
        }
        
        System.out.println("Files added: ");
        for(String file : filesAdded){
            System.out.println(file);
        }
        System.out.println("Files not added: " );
        for(String file : filesNotAdded){
            System.out.println(file);
        }
        

    }

    public void log(){
        String cwd = System.getProperty("user.dir");
        String ref = Helper.readFile(cwd + '/' + ".vcs/refs.txt");
        String[] refLines = ref.split("\n");
        String currCommit = refLines[0];
        String[] commitLines;
        do{
            String commit = Helper.readFile(cwd + '/' + ".vcs/objects/"+"cm"+currCommit);
            commitLines = commit.split("\n");
            System.out.println("Commit: " + currCommit);
            System.out.println("Author: " + commitLines[2]);
            System.out.println("Message" + commitLines[5]);
            System.out.println("Date " + commitLines[3]);
            System.out.println("==================================================================================");
            currCommit= commitLines[1].split(" ")[1];
        }while(!commitLines[1].split(" ")[1].equals("NoParentFound"));
    }


}
