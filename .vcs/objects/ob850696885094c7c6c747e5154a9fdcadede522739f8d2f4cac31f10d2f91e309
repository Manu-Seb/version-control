Tree.java
package core;
import java.util.ArrayList;
import java.util.List;

import utils.Helper;

public class Tree {
    private Node root;
    private String base; // the part we want to ignore

    // Constructor takes the dirs and a base to strip
    public Tree(List<String> dirNames, String base) {
        root = new Node("/");
        this.base = base.endsWith("/") ? base : base + "/"; // ensure trailing slash
        for (String dir : dirNames) {
            String relative = Helper.stripBase(dir,base);
            if (!relative.isEmpty()) {
                String[] parts = relative.split("/");
                addPath(parts, root);
            }
        }
    }

    // Strip base from a path
    

    // Add one path into the tree
    private void addPath(String[] parts, Node parent) {
        Node current = parent;
        for (String part : parts) {
            if (part.isEmpty()) continue; 
            Node existing = current.getChild(part);
            if (existing == null) {
                Node child = new Node(part);
                child.parent = current;
                current.children.add(child);
                current = child;
            } else {
                current = existing;
            }
        }
    }

    public Node getRoot() {
        return root;
    }

    

    // Optional: Pretty-print
    public void printTree(Node node, String prefix) {
        System.out.println(prefix + node.name+ " " + node.hash);
        for (Node child : node.children) {
            printTree(child, prefix + "  ");
        }
    }

    public static class Node {
        private String name;
        private Node parent;
        private List<Node> children;
        private String hash;

        public Node(String name) {
            this.name = name;
            this.children = new ArrayList<>();
        }

        public Node getChild(String name) {
            for (Node child : children) {
                if (child.name.equals(name)) {
                    return child;
                }
            }
            return null;
        }

        public List<Node> getChildren(){
            return this.children;
        }

        public String getName(){
            return this.name;
        }

        @Override
        public String toString() {
            return name;
        }

        public void setHash(String hash){
            this.hash= hash;
            
        }

        public String getFullPath() {
            if (parent == null) return name;
            if (parent.name.equals("/")) return "/" + name;
            return parent.getFullPath() + "/" + name;
        }

    }

    // Example
}
